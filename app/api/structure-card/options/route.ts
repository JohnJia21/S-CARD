import { NextResponse } from "next/server";
import { Client } from "@notionhq/client";

// ‚úÖ ‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèËøûÊé• Notion
const notion = new Client({ auth: process.env.NOTION_TOKEN });
const DATABASE_ID = process.env.NOTION_DATABASE_ID || "";

// üîΩ Ëé∑Âèñ Notion Êï∞ÊçÆÂ∫ìÁöÑÂ±ûÊÄßÈÄâÈ°π
export async function GET() {
  try {
    if (!DATABASE_ID) {
      return NextResponse.json(
        { error: "Áº∫Â∞ë NOTION_DB_ID" },
        { status: 500 }
      );
    }
    const db = await notion.databases.retrieve({ database_id: DATABASE_ID });

    // ÂèñÂá∫‰∏§‰∏™Â≠óÊÆµ
    // const domainOptions =
    //   (db.properties["È¢ÜÂüüÁª¥Â∫¶"] as any)?.select?.options?.map(
    //     (opt: any) => opt.name
    //   ) || [];
    //   console.log("useEffect ÊâßË°å‰∫Ü3 ‚úÖ" + domainOptions);

    const domainProp: any = db.properties["È¢ÜÂüüÁª¥Â∫¶"];
    let domainOptions: string[] = [];
    
    if (domainProp?.select?.options) {
      // ÂçïÈÄâ
      domainOptions = domainProp.select.options.map((opt: any) => opt.name);
    } else if (domainProp?.multi_select?.options) {
      // Â§öÈÄâ
      domainOptions = domainProp.multi_select.options.map((opt: any) => opt.name);
    }
    
    const topicOptions =
      (db.properties["‰∏ªÈ¢ò/‰∫ßÂìÅÊ†áÁ≠æ"] as any)?.multi_select?.options?.map(
        (opt: any) => opt.name
      ) || [];
    return NextResponse.json({ domainOptions, topicOptions });
  } catch (error: any) {
    console.error("‚ùå Ëé∑Âèñ Notion ÈÄâÈ°πÂ§±Ë¥•:", error);
    return NextResponse.json(
      { error: "Failed to fetch options", details: error.message },
      { status: 500 }
    );
  }
}



// export async function GET() {
//   return NextResponse.json({
//     domainOptions: ["Áª¥Â∫¶A", "Áª¥Â∫¶B"],
//     topicOptions: ["Ê†áÁ≠æ1", "Ê†áÁ≠æ2", "Ê†áÁ≠æ3"],
//   });
// }

